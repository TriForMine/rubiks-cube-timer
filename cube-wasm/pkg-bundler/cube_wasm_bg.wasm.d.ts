/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const scrambleutils_parse_scramble: (a: number, b: number) => [number, number];
export const scrambleutils_format_scramble: (a: number, b: number) => [number, number];
export const scrambleutils_generate_algorithm_practice: (a: number, b: number) => [number, number];
export const __wbg_algorithmpatterns_free: (a: number, b: number) => void;
export const algorithmpatterns_oll: () => [number, number];
export const algorithmpatterns_pll: () => [number, number];
export const algorithmpatterns_f2l: () => [number, number];
export const __wbg_wasmoptimizedcube_free: (a: number, b: number) => void;
export const wasmoptimizedcube_new: () => number;
export const wasmoptimizedcube_ptr: (a: number) => number;
export const wasmoptimizedcube_len: (a: number) => number;
export const wasmoptimizedcube_apply_move: (a: number, b: number, c: number) => [number, number];
export const wasmoptimizedcube_apply_scramble: (a: number, b: number, c: number) => [number, number];
export const wasmoptimizedcube_apply_moves: (a: number, b: number, c: number) => void;
export const wasmoptimizedcube_is_solved: (a: number) => number;
export const wasmoptimizedcube_generate_random_scramble: (a: number) => [number, number];
export const wasmoptimizedcube_generate_competition_scramble: () => [number, number];
export const wasmoptimizedcube_generate_practice_scramble: () => [number, number];
export const wasmoptimizedcube_generate_long_scramble: () => [number, number];
export const wasmoptimizedcube_validate_scramble: (a: number, b: number) => number;
export const wasmoptimizedcube_moves_to_string: (a: number, b: number) => [number, number];
export const wasmoptimizedcube_get_stickers: (a: number) => [number, number];
export const wasmoptimizedcube_set_stickers: (a: number, b: number, c: number) => [number, number];
export const wasmoptimizedcube_get_face: (a: number, b: number) => [number, number];
export const wasmoptimizedcube_reset: (a: number) => void;
export const wasmoptimizedcube_clone: (a: number) => number;
export const moveutils_move_to_code: (a: number, b: number) => [number, number, number];
export const moveutils_code_to_move: (a: number) => [number, number, number, number];
export const moveutils_parse_scramble_to_codes: (a: number, b: number) => [number, number, number, number];
export const moveutils_codes_to_scramble: (a: number, b: number) => [number, number, number, number];
export const moveutils_validate_scramble_string: (a: number, b: number) => number;
export const moveutils_generate_competition_scramble_string: () => [number, number];
export const moveutils_generate_practice_scramble_string: () => [number, number];
export const moveutils_generate_long_scramble_string: () => [number, number];
export const moveutils_generate_random_scramble_string: (a: number) => [number, number];
export const cubecolors_WHITE: () => number;
export const cubecolors_YELLOW: () => number;
export const cubecolors_GREEN: () => number;
export const cubecolors_BLUE: () => number;
export const cubecolors_RED: () => number;
export const cubecolors_ORANGE: () => number;
export const perftest_benchmark_moves: (a: number) => number;
export const perftest_benchmark_scramble_generation: (a: number) => number;
export const perftest_benchmark_zero_copy_access: (a: number) => number;
export const main: () => void;
export const scrambleutils_generate_competition_scramble: () => [number, number];
export const scrambleutils_generate_practice_scramble: () => [number, number];
export const scrambleutils_generate_long_scramble: () => [number, number];
export const scrambleutils_generate_scramble: (a: number) => [number, number];
export const wasmoptimizedcube_parse_scramble: (a: number, b: number) => [number, number, number, number];
export const scrambleutils_validate_scramble: (a: number, b: number) => number;
export const wasmoptimizedcube_solved: () => number;
export const __wbg_scrambleutils_free: (a: number, b: number) => void;
export const __wbg_moveutils_free: (a: number, b: number) => void;
export const __wbg_cubecolors_free: (a: number, b: number) => void;
export const __wbg_perftest_free: (a: number, b: number) => void;
export const __wbindgen_exn_store: (a: number) => void;
export const __externref_table_alloc: () => number;
export const __wbindgen_export_2: WebAssembly.Table;
export const __wbindgen_free: (a: number, b: number, c: number) => void;
export const __wbindgen_malloc: (a: number, b: number) => number;
export const __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
export const __externref_drop_slice: (a: number, b: number) => void;
export const __externref_table_dealloc: (a: number) => void;
export const __wbindgen_start: () => void;
